
var map, layers, tiledMapServiceLayer, dynamicMapServiceLayer, locator,
    locatorAddress, precinctQuery, shortListresults, curGraphic, doShow,
    curResult, searchAddress, outerLayout, innerLayout, navToolbar, TM, 
    resizeTimer;

var loadingOverlay = (function(){
    // the overlay object with its methods are the return value 
    // of this anonymous function
    
    var overlayNode;
    return {
        init: function(){
            // create the container element for the overlay
            // We store the reference in the overlayNode closure variable
            overlayNode = dojo.create('div', {
                id: 'loadingOverlay',
                'class': 'loadingOverlay pageOverlay',
                innerHTML: '<div class="loadingMessage"></div>'
            }, dojo.body());
            
            return this;
        },
        show: function(){
            // show the overlay
            dojo.style( overlayNode, {
                display: 'block'
            });
        },
        hide: function(){
            // hide the overlay
            dojo.style( overlayNode, {
                display: 'none'
            });
        }
    };
})();

    
    
    //dojo.ready(function(){
    //    loadingOverlay.init().show();
    //    init();
    //});



/* Comments: this section is declaring variables for the page */

    
//dojo.addOnLoad(init);

function hideDomCover()
{
    loadingOverlay.hide();
}
    
function init() {
    //dojo.parser.parse(); // note djConfig.parseOnLoad = false;
 

    dojo.xhrGet({
        url: 'conf.json',
        load: function(result) {
            BuildMap(result,hideDomCover);
        },
        error: function(err) {
            alert("Failed to Load Configuration..");
        }
    });
}
        

//Create a map from config
function BuildMap(json, callback) {

    var obj, overviewMapDijit;
    
	//Parse the config file (conf.json)
    obj = JSON.parse(json);


	//Set the title for the page from the config file (conf.json)
    document.getElementById("pgTitle").innerHTML = obj.mapConfig.Page.title;
    
    var linkhtml = "";
    
    if(obj.mapConfig.Page.links.length > 0) {
        linkhtml += "<ul>";
        for(var i = 0; i < obj.mapConfig.Page.links.length; i += 1) {
            var link = obj.mapConfig.Page.links[i];
            linkhtml += '<li><a href="' + link.url + '" target="_blank">' + link.label + '</a></li>';
        }
        linkhtml += "</ul>";
        
        document.getElementById("headlinks").innerHTML = linkhtml;
    }
	
	//if we are not using the Hyperlink tool remove the Property Info tab
	var hasHL = false;
	
	for(var k = 0; k < obj.mapConfig.Tools.length; k += 1) {
		var tool = obj.mapConfig.Tools[k];
		if(tool.type == "Hyperlink") {
			hasHL = true;
		}
	}
	
	if(obj.mapConfig.Page.hasOwnProperty("helpTab")) {
		if(obj.mapConfig.Page.helpTab !== null && obj.mapConfig.Page.helpTab !== undefined) {
			document.getElementById("helpFrame").src = obj.mapConfig.Page.helpTab;
		} else {
			dijit.byId('mainTabContainer_tablist_helpTab').destroy();
		}
	} else {
		dijit.byId('mainTabContainer_tablist_helpTab').destroy();
	}
	
	if(!hasHL) {
		var maintb = dijit.byId('mainTabContainer_tablist_propInfoTab');
        if(maintb !== undefined && maintb != 'undefined'){
            maintb.destroy();
            }
	}
    

	
    var mret = agd.Utils.CreateMap(obj);
 
    //Connect functions to map events
    WireEvents();
    
    // Add Layers from configuration
    AddLayers(obj);
    
    //Create Queries
    //agd.Utils.CreateQueries(obj);
    
    //CreateSymbols
    agd.Utils.CreateSymbols(obj);
    
    //CreateToolbar
    //agd.Utils.CreateToolbar(obj);
    
    //Create Tasks
    //agd.Utils.BuildTasks(obj);
    
    navToolbar = new esri.toolbars.Navigation(map);
    
    //add the overview map 
    /*overviewMapDijit = new esri.dijit.OverviewMap({
        map: map,
        visible:true
    });
    overviewMapDijit.startup();*/
    
    map.resize();
	
	map.autoResize = true;
	
	//do a fake pan to get the scale working #hack
	//map.centerAt(map.getCenter());
    
    callback();
}

// Connect map events to functions
function WireEvents() {
    dojo.connect(map, 'onLoad', function(map) {
        //resize the map when the browser resizes
		dojo.connect(dijit.byId('map'), 'resize', function() {  //resize the map if the div is resized
			clearTimeout(resizeTimer);
			resizeTimer = setTimeout( function() {
			map.resize();
			map.reposition();
			}, 500);
		});
		
		clearTimeout(resizeTimer);
		resizeTimer = setTimeout( function() {
			map.reposition();
		}, 1500);
    });
	
	
	dojo.connect(dijit.byId('leftCol'),'resize',function(){
		map.resize();
		map.reposition();
	});
	
	dojo.connect(window, 'onresize', function(){
		map.resize();
		map.reposition();
	});
    
    dojo.connect(map, 'onMouseMove', function(evt) {
        var mp = evt.mapPoint;
        dojo.byId("mousePosition").innerHTML = "<strong>X: </strong>" + mp.x.toFixed(4) + "<strong> , Y: </strong>" + mp.y.toFixed(4);
    });
    
    dojo.connect(map, 'onClick', agd.Utils.mapClickHandler);
    
    //Create TOC
    dojo.connect(map, "onLayersAddResult", function (results) {
        agd.Utils.CreateTOC();
    });
    
    dojo.connect(map, 'onExtentHistoryChange', agd.Utils.extentHistoryChangeHandler);
	
	dojo.connect(map, 'onExtentChange', agd.Utils.extentChangedHandler);
}

//Add layers to the map from config
function AddLayers(layersConf) {
   
    map.addLayers(agd.Utils.CreateLayers(layersConf));
    
    map.infoWindow.resize(200,125);

}

function executeIdentifyTask(task, params,evt) {
    identifyParams.geometry = evt.mapPoint; 
}